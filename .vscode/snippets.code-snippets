{
  "ReactSyncComponentSkeleton": {
    "scope": " typescript, typescriptreact",
    "prefix": [
      "rscs",
      "skeleton",
      "react"
    ],
    "body": [
      "import * as Sy from '@effect-ts/core/Sync'",
      "import React from 'react'",
      "import { React_ } from 'react-effect-runner'",
      "export interface $0Props{ }",
      "const $0Factory = reactComponent<$0Props>()(",
      "Sy.succeed( (props: $0Props) => {",
      "return <p>Hello.</p>",
      "})",
      ")",
      "export { $0Factory }"
    ],
    "description": "Creates a React Component using the Sync skeleton pattern"
  },
  "ReactComponentSkeleton": {
    "scope": " typescript, typescriptreact",
    "prefix": [
      "rcs",
      "skeleton",
      "react"
    ],
    "body": [
      "import { tag } from '@effect-ts/core/Has';\nimport * as Sy from '@effect-ts/core/Sync';\n\ninterface $0Environment {}\n\nconst $0Environment = tag<$0Environment>();\n\nconst $0Factory = Sy.gen(function* (_) {\n\treturn ({children, ...props}) => {\n\t\treturn <div>{children}</div>;\n\t};\n});\n\nconst $0Skeleton = {\n\tenvironment: $0Environment,\n\tfactory: $0Factory,\n};\nexport default $0Skeleton;"
    ],
    "description": "Creates a React Component using the Sync skeleton pattern"
  },
  "Service": {
    "scope": " typescript, typescriptreact",
    "prefix": [
      "srv"
    ],
    "body": [
      "",
      "export interface $1 {$0}",
      "export const $1 = tag<$1>()"
    ],
    "description": "Creates a Service"
  },
  "Managed": {
    "prefix": "+M",
    "body": [
      "import * as M from \"@effect-ts/core/Effect/Managed\""
    ],
    "description": "Managed as M"
  },
  "Ref": {
    "prefix": "+Ref",
    "body": [
      "import * as Ref from \"@effect-ts/core/Effect/Ref\""
    ],
    "description": "Ref"
  },
  "RefM": {
    "prefix": "+RefM",
    "body": [
      "import * as RefM from \"@effect-ts/core/Effect/RefM\""
    ],
    "description": "RefM"
  },
  "Map": {
    "prefix": "+Map",
    "body": [
      "import * as Map from \"@effect-ts/core/Collections/Immutable/Map\""
    ],
    "description": "Map"
  },
  "Array": {
    "prefix": "+A",
    "body": [
      "import * as A from 'effect/ReadonlyArray'"
    ],
    "description": "Array as A"
  },
  "Record": {
    "prefix": "+R",
    "body": [
      "import * as R from \"@effect-ts/core/Collections/Immutable/Dictionary\""
    ],
    "description": "Record as R"
  },
  "NonEmptyArray": {
    "prefix": "+NA",
    "body": [
      "import * as NA from \"@effect-ts/core/Collections/Immutable/NonEmptyArray\""
    ],
    "description": "NonEmptyArray as NA"
  },
  "Prelude": {
    "prefix": "+P",
    "body": [
      "import * as P from \"@effect-ts/core/Prelude\""
    ],
    "description": "Prelude as NA"
  },
  "DSL": {
    "prefix": "+DSL",
    "body": [
      "import * as DSL from \"@effect-ts/core/Prelude/DSL\""
    ],
    "description": "Prelude DSL as DSL"
  },
  "Queue": {
    "prefix": "+Q",
    "body": [
      "import * as Q from \"@effect-ts/core/Effect/Queue\""
    ],
    "description": "Queue as Q"
  },
  "Semaphore": {
    "prefix": "+Q",
    "body": [
      "import * as Sem from \"@effect-ts/core/Effect/Semaphore\""
    ],
    "description": "Semaphore as Sem"
  },
  "Either": {
    "prefix": "+E",
    "body": [
      "import * as E from \"effect/Either\""
    ],
    "description": "Either as E"
  },
  "Exit": {
    "prefix": "+Ex",
    "body": [
      "import * as Ex from \"@effect-ts/core/Effect/Exit\""
    ],
    "description": "Exit as Ex"
  },
  "Cause": {
    "prefix": "+C",
    "body": [
      "import * as C from \"@effect-ts/core/Effect/Cause\""
    ],
    "description": "Cause as C"
  },
  "Iso": {
    "prefix": "+Iso",
    "body": [
      "import * as Iso from \"@effect-ts/monocle/Iso\""
    ],
    "description": "Iso as Iso"
  },
  "Prism": {
    "prefix": "+Prism",
    "body": [
      "import * as Prism from \"@effect-ts/monocle/Prism\""
    ],
    "description": "Prism as Prism"
  },
  "Lens": {
    "prefix": "+Lens",
    "body": [
      "import * as Lens from \"@effect-ts/monocle/Lens\""
    ],
    "description": "Lens as Lens"
  },
  "Optional": {
    "prefix": "+Opt",
    "body": [
      "import * as Op from \"@effect-ts/monocle/Optional\""
    ],
    "description": "Optional as Op"
  },
  "Traversal": {
    "prefix": "+Tr",
    "body": [
      "import * as Tr from \"@effect-ts/monocle/Traversal\""
    ],
    "description": "Traversal as Tr"
  },
  "Newtype": {
    "prefix": "+NT",
    "body": [
      "import * as NT from \"@effect-ts/core/Newtype\""
    ],
    "description": "Newtype as NT"
  },
  "Tuple": {
    "prefix": "+Tp",
    "body": [
      "import * as Tp from \"@effect-ts/system/Collections/Immutable/Tuple\""
    ],
    "description": "Tuple as Tp"
  },
  "HashMap": {
    "prefix": "+HM",
    "body": [
      "import * as HM from \"@effect-ts/core/Collections/Immutable/HashMap\""
    ],
    "description": "HashMap as HM"
  },
  "Chunk": {
    "prefix": "+C",
    "body": [
      "import * as C from \"effect/Chunk\""
    ],
    "description": "Chunk as C"
  },
  "Option Next": {
    "prefix": "+O",
    "body": [
      "import * as O from 'effect/Option'"
    ],
    "description": "Option as O"
  },
  "Effect next": {
    "prefix": "+T",
    "body": [
      "import {Effect as T} from 'effect'"
    ],
    "description": "Effect as Z"
  },
  "Record next": {
    "prefix": "+RN",
    "body": [
      "import * as R from '@effect/data/ReadonlyRecord'"
    ],
    "description": "Record as R"
  },
  "Layer next": {
    "prefix": "+L",
    "body": [
      "import { Layer as L } from 'effect'"
    ],
    "description": "Record as R"
  },
  "Context next": {
    "prefix": "+C",
    "body": [
      "import * as Context from '@effect/data/Context'"
    ],
    "description": "Context as Context"
  },
  "Stream next": {
    "prefix": "+S",
    "body": [
      "import * as S from '@effect/Stream'"
    ],
    "description": "Stream as S"
  },
  "Schema next": {
    "prefix": "+SC",
    "body": [
      "import * as Sc from '@effect/schema/Schema'"
    ],
    "description": "Schema as S"
  },
  "Hashmap next": {
    "prefix": "+HMN",
    "body": [
      "import * as HM from '@effect/data/HashMap'"
    ],
    "description": "HashMap as HM"
  },
  "List next": {
    "prefix": "+LN",
    "body": [
      "import * as List from '@effect/data/List'"
    ],
    "description": "List as List"
  },
}